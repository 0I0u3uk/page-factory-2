=== Настройка для Cucumber

{counter:ac}. Дописать в test runner в опцию plugin две строки:

[source,]
----
@RunWith(Cucumber.class)
@CucumberOptions(monochrome = true, 
        plugin = {"pretty","junit:target/cucumber/result.xml",
                           "json:target/cucumber/pagefactory.json"},
        glue = {"ru.sbtqa.tag.stepdefs",  "setting", "pagefactory.stepdefs"},
        features = {"src/test/resources/features"}
)
public class CucumberTest {}
----

TIP: При необходимости можно задать несколько run-файлов, формируя результаты в разные файлы (в нашем случае файл `pagefactory.json`)

{counter:ac}. Если в вашем проекте в файле `pom.xml` для плагина `maven-surefire-plugin` есть строка запуска, то аналогичным образом нужно добавить в нее две строки:

[source,]
----
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire.version}</version>
        <configuration>
          <argLine>
            -Dcucumber.options="--plugin junit:target/cucumber/result.xml --plugin json:target/cucumber/pagefactory.json"
          </argLine>
        </configuration>
        
        ....
        
      </plugin>
----

Теперь, когда `Adaptavist` подключен, необходимо установить соответствие тестового сценария и сценария в `Jira`. Для этого нужно расставить тэги `@TestCaseKey`. В качестве значения тэга указывается `id` кейса. Например:

[source,]
----
  @TestCaseKey=EFSTAG-T4
  Scenario: Test Stash
    * user checks that the field "first name" is empty
    
    ....
    
----
==== Сборка результатов тестов

Для сборки отчетов для `Adaptavist` достаточно выполнить 

[source,]
----
  mvn clean test
----

После этого по указанному в "plugin" пути должен появиться заданный json-файл. В нашем случае в каталоге `target/cucumber` файл `pagefactory.json`

image:images/cucumber.png[]

====  Синхронизация результатов для `Cucumber`

===== При локальном запуске

{counter:ae}. Выполнить из командной строки в директории проекта либо создать вручную zip-архив, положив в него сгенерированные json-файлы

[source,]
----
 zip output_results.zip target/cucumber/*.json
----

{counter:ae}. Выполнить 
[source,]
----
curl -k --basic --user user:password -F "file=@output_results.zip" https://sbtatlas.sigma.sbrf.ru/jira/rest/atm/1.0/automation/execution/cucumber/EFSTAG?autoCreateTestCases=true
----

При этом:

* Вместо `user` подставить пользователя `Jira`, вместо `password` - пароль пользователя
* При необходимости изменить `URL` для `Jira`
* Вместо `EFSTAG` подставить имя проекта

===== Jenkins
Для запуска через `Jenkins` есть специальный плагин. Почитать о нем и увидеть полную инструкцию по работе с ним в картинках можно  https://www.adaptavist.com/doco/display/KT/Automated+Testing+Tools[здесь^, role="ext-link"]

===== Результаты в Jira
После выполнения синхронизации на странице `Tests` появится отметка о результате запуска (на рисунке отмечена [lime]#зеленым#, [red]#красным# отмечен `id` теста)

image:images/cucumber_tests.png[]

Внутри теста появится информация о запуске в секции `Execution`:

image:images/cucumber-exec.png[]

Так же информация о запуске отобразится в задаче, для которой создавался тест кейс:

image:images/cucumber_issue.png[]


