== Rest plugin
Плагин для автоматизации API приложений, базирующийся на `rest-assured` и `cucumber`

Основная идея заключается в том, что каждый метод API описывается отдельным классом, в котором есть поля запроса и методы валидации

В качестве паттерна проектирования взят PageObject. Перекладывая идеи этого паттерна с GUI тестирования, на тестирование API для каждого метода API в приложении с автотестами создается свой класс, где описываются нужные поля запроса и методы валидации. Основное преимущество данного паттерна - это простота поддержки автотестов, ведь в случае изменения полей объекта API, изменения нужно внести в одном месте, где он описан.

Использование же BDD позволяет писать сценарии автоматизированного тестирования на человекочитаемом языке, что позволяет понизить входной порог для разработчиков автотестов, и позволяет людям, не знакомым с языками программирования и автоматизацией тестирования, понять и воспроизвести шаги автотеста в ручную.

:plug: rest-plugin

include::web_how_to_start.asciidoc[]

В файле `application.properties` в параметре `api.baseURI` прописать путь тестируемого приложения. Например:

[source,]
----
api.baseURI = http://api.com
----

=== Описание методов API
Для описания метода необходимо создать класс, унаследовав его от `EndpointEntry`


Параметры метода нужно задать аннотацией `@Endpoint`. С ее помощью определяются:

* `method` - метод (POST, GET, PUT, DELETE, PATCH, OPTIONS, HEAD)
* `path` - путь, относительно заданного в `api.baseURI`
* `title` - имя метода для обращения из тестового сценария
* `template` - шаблон запроса

*__Пример:__*
[source,]
----
@Endpoint(method = Rest.GET, path = "repos/sbtqa", title = "Запрос")
public class ApiEntry extends EndpointEntry {
...
}
----

Путь до пакета с описанными методами необходимо прописать в файле конфигурации. Например:

[source,]
----
api.endpoint.package = ru.sbtqa.rest
----
