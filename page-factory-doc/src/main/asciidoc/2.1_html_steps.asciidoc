=== Шаги работы с блоками

Помимо описанного выше шага выполнения глагольного выражения в блоке есть и другие. Ниже приведен полный список шагов.

NOTE: Здесь можно перед шагом использовать “пользователь” или “он”

[source,]
----
# выполнить глагольное выражение без параметров
* в блоке "Имя блока или путь до него" (глагольное выражение в блоке)
# с одним парметром
* в блоке "Имя блока или путь до него" (глагольное выражение в блоке) с параметром "Параметр"
# с параметрами в виде таблицы 
* в блоке "Имя блока или путь до него" (глагольное выражение в блоке) с параметрами из таблицы
    | Значение | Значение |
    | Значение | Значение |

# с двумя и более параметрами
* в блоке "Имя блока или путь до него" (глагольное выражение в блоке) с параметрами "Параметр 1" “Параметр 2” …
----

Так же есть набор проверки наличия шагов в блоке с учетом типа

[source,]
----
# шаги поиска элемента с учетом типа
* в блоке "Имя блока или путь до него" находит элемент "Элемент"
* в блоке "Имя блока или путь до него" находит текстовое поле "Элемент" 
* в блоке "Имя блока или путь до него" находит чекбокс "Элемент" 
* в блоке "Имя блока или путь до него" находит радиокнопка "Элемент"  
* в блоке "Имя блока или путь до него" находит ссылку "Элемент"  
* в блоке "Имя блока или путь до него" находит таблицу "Элемент"  
* в блоке "Имя блока или путь до него" находит заголовок "Элемент"  
* в блоке "Имя блока или путь до него" находит кнопку "Элемент"  
* в блоке "Имя блока или путь до него" находит изображение "Элемент"
----

[source,]
----
   * в списке "" находит элемент со значением "" 
----


==== Как использовать шаги без `cucumber` (Fluent API)

Обратиться к методам-шагам можно следующим образом: `WebSteps.getInstance()`

Пример::
[source,]
----
HtmlSteps.getInstance().openPage("Main")
                      .find("menu", "button", "Home")
                      .click("Contact")
                      .openPage("Contact")
                      .checkEmpty("first name");
----

==== Как использовать шаги проекта без `cucumber`
Чтобы использовать кастомные шаги вашего проекта через Fluent API, унаследуйте класс с шагами от `HtmlGenericSteps` с учетом типизации.

WARNING: Каждый метод вашего класса с шгами должен возварщать объект типа `this` приведенный к `T`

Пример класса::
[source,]
----
public class YourGenericSteps<T extends YourGenericSteps<T>> extends HtmlGenericSteps<T> {
    public T yourMethod() {
        ...
        return (T) this;
    }
}
----

Далее на основе этого класса нужно создать строго типизированный класс, который позволит до комплияции понимать, с каким контекстом происходит взаимодействие в текущий  момент. Сделать это можно следующим образом:
[source,]
----
public class YourSteps extends YourGenericSteps<YourSteps> {
     private static YourSteps instance;
     
     public static YourSteps getInstance() {
        if (instance == null) {
            instance = new YourSteps();
        }
        return instance;
    }
}
----

Пример работы:
[source,]
----
YourSteps.getInstance().openPage("Main")
                      .find("menu", "button", "Home")
                      .yourMethod()
                      .openPage("Contact")
                      .checkEmpty("first name");
----

