==== Работа с тестовыми данными
===== Тестовые данные из файлов

Тестовые данные могут быть использованы в любом шаге сценария. Тестовые данные могут храниться в одном из форматов:

* json
* properties
* excel
* mongo

====== Тип и расположение файлов тестовых данных

Задать тип тестовых данных можно в файле конфигурации `application.properties`
[source,]
----
data.type = json
----
Задать расположение тестовых данных можно следующим образом:

[source,]
----
data.folder = src/test/resources/data/
----

Для `excel` путь указывается до файла без расширения:

[source,]
----
data.folder = src/test/resources/data/Data
----

Если файлы имеют нестандартное для типа данных расширение, нужно указать его в настройках. Для `excel` не будет учитываться (всегда будет `xslx`). Например, для файлов с раширением `jsonp`:

[source,]
----
data.extension = jsonp
----

====== Инициализация коллекции

Для инициализации коллекции нужно задать ее через конфигурацию. Имя файла задается без расширения. Если в проекте используется несколько коллекций, то в параметре нужно указать наиболее часто используемую. Пример инициализации коллекции для `Data.json`:

[source,]
----
data.initial.collection = Data
----

Обратиться к инициализированной можно через символ `$`, к неинициализированной через `$` и имя.
Для обращения из фичи существует тэг `@data`. Пример:

[source,]
----
@data=$OtherData
----

Для `excel` коллекция - это имя вкладки

====== Особенности работы `mongodb`
Для `mongodb` есть два дополнительных обязательных параметра: адрес и имя базы данных. Например:
[source,]
----
data.uri = mongodb://username:password@host.ru:8080
data.db = bd
----

====== Путь к элементу коллекции
Для обозначения пути внутри коллекции используются фигурные скобки

WARNING: Обратите внимание, если имя коллекции не указывается явно перед параметром, то перед фигурными скобками должен стоять символ `$` (брать данные из текущей коллекции)

Пример для элемента `first name` из набора `Admin` коллекции `Data`

[source,]
----
И пользователь (тестирует) "Элемент" с параметром "$Data{Admin.first name}"
----

====== Ссылки на другие элементы
Поддерживается работа со ссылками в в данных, как внутри одной коллекции, так и на другие коллекции.

Для `mongodb` используется втроенный механизм ссылок.

Для `excel` достаточно в ячейке значения указать ссылку вида `link:<имя коллекции>.<путь>` например,
[source,]
----
link:Data.price
----

Для `json` ссылки задавать можно как объект вида `{ "$ref" : "<имя коллекции>.<путь>" }` например,
[source,]
----
{
    "some reference": {
        "$ref": "Data:price"
    },
    "price": 20.00
}
----

Для `properties` ссылки задавать можно как объект вида `<property name>.$ref = <имя коллекции>.<путь>` например,
[source,]
----
someReference.$ref = Data:price
price = 20.00
----


====== Примеры
*__Простой пример с заданием коллекции через тэг `@data`__*

image::images/dataSimpleEx.png[]

*__Через `@data` можно задать не только имя коллекции, но и путь к набору данных внутри нее__*

Пример:

image::images/dataEx2.png[]

*__Пример инициализации коллекции для сценария с использованием параметров в таблице данных__*

image::images/dataTableEx.png[]

*__Пример использования нескольких файлов данных в одном тестовом сценарии, массивов данных__*

image::images/dataTwoCollections.png[]


*__Пример задания пути данных с учетом коллекции, описанной в конфигурации__*

Пример для значения

[source,]
----
data.initial.collection = Data
----

image::images/dataInit.png[]


*__Пример рабооты со ссылками__*

===== Запоминание значений и работа с ними (Stash)
{counter:aa}. Для запоминания значения необходимо в одном из шагов выполнить 

[source,]
----
Stash.put("key", "value");
----

WARNING: Обратите внимание! Для использования запомненных значений в шагах необходимо, чтобы ключ и значение были типа `String`

{counter:aa}. Используйте запомненное значение в любом шаге, например:

[source,]
----
* пользователь заполняет поле "Поле" "#{key}"
----

*__Особенности:__*

* Ключ может использоваться в любых возможных вариантах: в списке или таблице с данными, в многострочных параметрах, параметрах сценария. 

* Ключ может быть именем поля или частью текста

[source,]
----
* пользователь заполняет поле "Поле"
"""
Это многострочный параметр
с #{key} в качестве фрагмента
текста
"""
----

* В одном параметре может использоваться сколько угодно ключей, в том числе один и тот же ключ несколько раз:

[source,]
----
* пользователь заполняет поле "Поле"
"""
Это многострочный параметр с двумя разными данными
с ключами #{key1} и #{key2} в качестве фрагментов
текста
"""
----
